/*! cropicon - v1.0.0 - 2016-11-01 */

"use strict";

angular.element(document).ready(function() {}), function(window, angular) {
    angular.module("cropicon", [ "ngRoute", "ngResource", "ngCookies", "ngSanitize", "iUsers", "AuthService", "iPublicAccess", "iDirective" ]).config([ "$routeProvider", "$locationProvider", "$httpProvider", "$sceDelegateProvider", function($routeProvider, $locationProvider, $httpProvider, $sceDelegateProvider) {
        $locationProvider.html5Mode({
            enabled: !0,
            requireBase: !1
        }), $httpProvider.interceptors.push("AuthInterceptor"), $httpProvider.interceptors.push("timestampMarker"), 
        $httpProvider.interceptors.push("securityInterceptor"), $sceDelegateProvider.resourceUrlWhitelist([ "self", "http://*.youtube.com/**" ]), 
        $routeProvider.when("/", {
            title: "Home",
            templateUrl: "partials/home",
            controller: "HomeController",
            access: {
                isFree: !0
            }
        }).when("/about-us", {
            title: "About us",
            templateUrl: "partials/aboutus",
            controller: "AboutUsController",
            access: {
                isFree: !0
            },
            resolve: {}
        }).when("/how-it-works", {
            title: "How It Works",
            templateUrl: "partials/howitworks",
            controller: "HowItWorksController",
            access: {
                isFree: !0
            }
        }).when("/login", {
            templateUrl: "users/login",
            controller: "LoginController",
            access: {
                isFree: !0
            }
        }).when("/logout", {
            controller: "LogoutController",
            access: {
                isFree: !1
            }
        }).when("/sign-up", {
            templateUrl: "users/signup",
            controller: "SignUpController",
            access: {
                isFree: !0
            }
        }).otherwise({
            redirectTo: "/"
        });
    } ]).run([ "$rootScope", "$location", "Auth", function($rootScope, $location, Auth) {
        $rootScope.$on("$routeChangeStart", function(event, currRoute, prevRoute) {
            $rootScope.loadingView = !0, $rootScope.title = "", currRoute.$$route && void 0 !== currRoute.$$route.title && ($rootScope.title = currRoute.$$route.title);
            var routesThatDontRequireAuth = [ "/login", "/sign-up" ], isFreeAccess = currRoute.$$route.access.isFree, isLoggedIn = Auth.isLogin();
            if (isFreeAccess && routesThatDontRequireAuth.indexOf($location.path()) !== -1 && isLoggedIn) event.preventDefault(), 
            $location.path("/"); else if (!isFreeAccess) {
                var isLogoutRoute = currRoute.$$route.originalPath.indexOf("/logout") !== -1;
                isLogoutRoute && isLoggedIn ? (Auth.logout(), $location.path("/")) : isLogoutRoute && !isLoggedIn && $location.path("/login");
            }
        }), $rootScope.$on("$routeChangeSuccess", function(event, currRoute, prevRoute) {
            $rootScope.loadingView = !1;
        });
    } ]).constant("API_PATH", "http://localhost:3000/api/v1/");
}(window, window.angular), function(window, angular) {
    var iPublic = angular.module("iPublicAccess", []);
    iPublic.controller("HomeController", [ "$scope", "$log", "$interval", function($scope, $log, $interval) {
        $scope.greeting = "Hello Amar", $scope.clock = "loading clock...";
        var clockTick = function() {
            $scope.clock = Date.now();
        };
        clockTick(), $interval(clockTick, 1e3);
    } ]), iPublic.controller("AboutUsController", [ "$scope", "$log", function($scope, $log) {
        $scope.message = "Hello From Controller";
    } ]), iPublic.controller("HowItWorksController", [ "$scope", "$log", function($scope, $log) {
        $scope.message = "Hello From HowItWorksController";
    } ]), iPublic.factory("SessionStorage", [ "$window", "$http", function($window, $http) {
        return {
            get: function(key) {
                return $window.sessionStorage.getItem(key);
            },
            set: function(key, value) {
                $window.sessionStorage.setItem(key, value);
            },
            destroy: function(key) {
                return $window.sessionStorage.removeItem(key);
            }
        };
    } ]), iPublic.factory("LocalStorage", [ "$window", function($window) {
        return {
            get: function(key) {
                return $window.localStorage.getItem(key);
            },
            set: function(key, value) {
                $window.localStorage.setItem(key, value);
            },
            destroy: function(key) {
                return $window.localStorage.removeItem(key);
            }
        };
    } ]);
}(window, window.angular), function(window, angular) {
    var iDirective = angular.module("iDirective", []);
    iDirective.directive("displayTime", [ "$parse", function($parse) {
        return {
            restrict: "E",
            replace: !0,
            transclude: !1,
            template: '<span class="currentTime"></span>',
            link: function(scope, element, attrs, controller) {
                var currentDate = new Date();
                element.text(currentDate.toTimeString());
            }
        };
    } ]), iDirective.directive("clock", [ "$interval", function($interval) {
        return {
            restrict: "E",
            scope: !0,
            transclude: !0,
            template: "<span class='clock'><span class='clock-text' ng-transclude></span><span class='clock-time'>{{date.now() | date: 'medium'}}</span></span>",
            link: function($s, $e, $a) {
                var clockTick = function() {
                    $s.date = Date;
                };
                clockTick(), $interval(clockTick, 1e3);
            }
        };
    } ]);
}(window, window.angular), angular.module("AuthService", []).factory("Auth", function($http, $q, AuthToken, API_PATH) {
    return {
        login: function(username, password) {
            return $http.post(API_PATH + "users/login", {
                email: username,
                password: password
            }).success(function(data) {
                return AuthToken.setToken(data.token), data;
            });
        },
        logout: function() {
            AuthToken.removeToken();
        },
        isLogin: function() {
            return !!AuthToken.getToken();
        },
        getUser: function() {
            var token = AuthToken.getToken();
            return token ? $http.get(API_PATH + "users/me?token=" + token) : $q.reject({
                message: "User has no token"
            });
        }
    };
}).factory("AuthToken", [ "$window", "$cookies", function($window, $cookies) {
    return {
        getToken: function() {
            return $window.localStorage.getItem("token");
        },
        setToken: function(token) {
            token ? $window.localStorage.setItem("token", token) : $window.localStorage.removeItem("token");
        },
        removeToken: function() {
            $window.localStorage.removeItem("token");
        }
    };
} ]).factory("AuthInterceptor", [ "$location", "$q", "AuthToken", "API_PATH", function($location, $q, AuthToken, API_PATH) {
    return {
        request: function(config) {
            var token = AuthToken.getToken();
            return token && (config.headers["x-access-token"] = token), config;
        },
        response: function(res) {
            return res;
        },
        responseError: function(response) {
            return 403 !== response.status && 401 !== response.status || $location.path("/login"), 
            $q.reject(response);
        }
    };
} ]).factory("timestampMarker", [ function() {
    var timestampMarker = {
        request: function(config) {
            return config.requestTimestamp = new Date().getTime(), config;
        },
        response: function(response) {
            return response.config.responseTimestamp = new Date().getTime(), response;
        }
    };
    return timestampMarker;
} ]).provider("securityInterceptor", [ function() {
    this.$get = function($location, $q) {
        return function(promise) {
            return promise.then(null, function(response) {
                return 403 !== response.status && 401 !== response.status || $location.path("/"), 
                $q.reject(response);
            });
        };
    };
} ]), function(window, angular) {
    var Users = angular.module("iUsers", []);
    Users.controller("LoginController", [ "$scope", "$rootScope", "$log", "$location", function($scope, $rootScope, $log, $location) {
        $scope.headerTitle = "Login !";
        var self = this;
        self.submit = function() {
            $log.info("User clicked submit with ", self.user);
        };
    } ]), Users.controller("SignUpController", [ "$scope", "$log", function($scope, $log) {
        $scope.message = "Hello From SignUpController", $log.info("SignUpController");
    } ]);
}(window, window.angular);
//# sourceMappingURL=cropicon.min.js.map